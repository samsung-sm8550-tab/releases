name: Generate OTA JSON for LineageOS

on:
  push:  # Runs on every commit & tag push
    branches:
      - main  # Modify if needed to match your main development branch
    tags:
      - "lineage-*"  # Runs for all releases following "lineage-" naming scheme
  workflow_dispatch:  # Allows manual triggering
    inputs:
      release_tag:
        description: "Tag name for the release (e.g., lineage-22.1-20250214-UNOFFICIAL-gts9wifi)"
        required: true
        type: string

jobs:
  generate-ota-json:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Determine the release tag
      - name: Get release info
        id: release
        run: |
          # Determine release tag based on trigger type
          if [[ -n "${{ github.event.inputs.release_tag }}" ]]; then
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          elif [[ -n "${GITHUB_REF_NAME}" ]]; then
            RELEASE_TAG="${GITHUB_REF_NAME}"
          else
            echo "ERROR: Could not determine release tag."
            exit 1
          fi

          echo "TAG_NAME=$RELEASE_TAG" >> $GITHUB_ENV

          # Extract device and version info from the tag
          DEVICE_NAME="gts9wifi"
          ROM_TYPE="UNOFFICIAL"

          # Extract version from tag name (assumes format: lineage-22.1-YYYYMMDD-UNOFFICIAL-gts9wifi)
          VERSION=$(echo "$RELEASE_TAG" | grep -oP 'lineage-\K[0-9]+(\.[0-9]+)?')

          if [[ -z "$VERSION" ]]; then
            echo "ERROR: Could not determine version from tag."
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 3: Construct OTA JSON data
      - name: Generate OTA JSON
        run: |
          OTA_JSON="ota.json"
          DOWNLOAD_URL="https://github.com/samsung-sm8550-tab/releases/download/${{ env.TAG_NAME }}/lineage-${{ env.VERSION }}-${{ env.TAG_NAME }}-UNOFFICIAL-${DEVICE_NAME}.zip"

          # Fetch file size
          SIZE=$(curl -sI $DOWNLOAD_URL | grep -i Content-Length | awk '{print $2}' | tr -d '\r')

          # Fetch MD5 checksum
          MD5=$(curl -sL $DOWNLOAD_URL | md5sum | awk '{print $1}')

          # Generate timestamp
          TIMESTAMP=$(date +%s)

          # Generate OTA JSON
          cat <<EOF > $OTA_JSON
          {
            "response": [
              {
                "datetime": $TIMESTAMP,
                "filename": "lineage-${{ env.VERSION }}-${{ env.TAG_NAME }}-UNOFFICIAL-${DEVICE_NAME}.zip",
                "id": "$MD5",
                "romtype": "UNOFFICIAL",
                "size": $SIZE,
                "url": "$DOWNLOAD_URL",
                "version": "${{ env.VERSION }}"
              }
            ]
          }
          EOF

      # Step 4: Upload the OTA JSON file as an artifact
      - name: Upload OTA JSON
        uses: actions/upload-artifact@v4
        with:
          name: ota-json
          path: ota.json

      # Step 5: Commit and push OTA JSON to repository
      - name: Commit and push OTA JSON
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add ota.json
          git commit -m "Add OTA JSON for release ${{ env.TAG_NAME }}"
          git push origin HEAD:${{ github.ref_name }}
