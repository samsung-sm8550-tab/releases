name: Generate OTA JSON for LineageOS

on:
  push:
    tags:
      - "*"
  workflow_dispatch:  # Allows manual triggering from GitHub Actions
    inputs:
      release_tag:
        description: "Select the tag for the release"
        required: true
        type: string

jobs:
  generate-ota-json:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Determine the tag name
      - name: Set release tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG_NAME=${{ inputs.release_tag }}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi

      # Step 3: Extract latest release info
      - name: Get release info
        id: release
        run: |
          # Validate tag name
          if [[ -z "${{ env.TAG_NAME }}" ]]; then
            echo "ERROR: Release tag is missing!"
            exit 1
          fi

          # Set up variables
          RELEASE_TAG=${{ env.TAG_NAME }}
          OTA_JSON="ota.json"
          DEVICE_NAME="gts9wifi"
          ROM_TYPE="UNOFFICIAL"
          VERSION="22.0"

          # Define release URL
          DOWNLOAD_URL="https://github.com/samsung-sm8550-tab/releases/download/$RELEASE_TAG/lineage-$VERSION-$RELEASE_TAG-$ROM_TYPE-$DEVICE_NAME.zip"

          # Fetch file size
          SIZE=$(curl -sI $DOWNLOAD_URL | grep -i Content-Length | awk '{print $2}' | tr -d '\r')

          # Fetch MD5 checksum
          MD5=$(curl -sL $DOWNLOAD_URL | md5sum | awk '{print $1}')

          # Generate timestamp
          TIMESTAMP=$(date +%s)

          # Write OTA JSON
          cat <<EOF > $OTA_JSON
          {
            "response": [
              {
                "datetime": $TIMESTAMP,
                "filename": "lineage-$VERSION-$RELEASE_TAG-$ROM_TYPE-$DEVICE_NAME.zip",
                "id": "$MD5",
                "romtype": "$ROM_TYPE",
                "size": $SIZE,
                "url": "$DOWNLOAD_URL",
                "version": "$VERSION"
              }
            ]
          }
          EOF

      # Step 4: Upload the OTA JSON file as an artifact
      - name: Upload OTA JSON
        uses: actions/upload-artifact@v4
        with:
          name: ota-json
          path: ota.json

      # Step 5: Commit and push OTA JSON to repository
      - name: Commit and push OTA JSON
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add ota.json
          git commit -m "Add OTA JSON for release ${{ env.TAG_NAME }}"
          git push origin HEAD:${{ github.ref_name }}
