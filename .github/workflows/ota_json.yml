name: Generate OTA JSON for LineageOS

on:
  push:  # Runs on every commit
    branches:
      - main  # Modify if needed
  workflow_dispatch:  # Allows manual trigger

jobs:
  generate-ota-json:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Fetch the latest release tag from GitHub API
      - name: Get latest release info
        id: latest_release
        run: |
          echo "=============================================="
          echo "üîç FETCHING LATEST RELEASE FROM GITHUB API..."
          echo "=============================================="

          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          echo "üì° API Request URL: $API_URL"

          RESPONSE=$(curl -s $API_URL)

          if [[ -z "$RESPONSE" ]]; then
            echo "‚ùå ERROR: Failed to fetch release data. Exiting."
            exit 1
          fi

          echo "‚úÖ SUCCESS: Fetched release data."
          echo "üìú RAW API RESPONSE:"
          echo "$RESPONSE" | jq

          # Extract release tag
          RELEASE_TAG=$(echo "$RESPONSE" | jq -r .tag_name)
          if [[ -z "$RELEASE_TAG" || "$RELEASE_TAG" == "null" ]]; then
            echo "‚ùå ERROR: Could not fetch latest release tag. Exiting."
            exit 1
          fi
          echo "üìå RELEASE TAG FOUND: $RELEASE_TAG"
          echo "TAG_NAME=$RELEASE_TAG" >> $GITHUB_ENV

          # Extract OTA file details
          echo "üîé Searching for OTA ZIP file in release assets..."
          ASSET_URL=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name | endswith(".zip")) | .browser_download_url')
          FILE_NAME=$(basename "$ASSET_URL")

          if [[ -z "$ASSET_URL" || "$ASSET_URL" == "null" ]]; then
            echo "‚ùå ERROR: Could not find a valid OTA zip file in assets. Exiting."
            exit 1
          fi

          echo "üìÇ OTA ZIP FILE FOUND: $FILE_NAME"
          echo "üåç OTA FILE URL: $ASSET_URL"

          echo "ASSET_URL=$ASSET_URL" >> $GITHUB_ENV
          echo "FILENAME=$FILE_NAME" >> $GITHUB_ENV

          # Extract file size
          SIZE=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name | endswith(".zip")) | .size')
          echo "üìè FILE SIZE: $SIZE bytes"
          echo "SIZE=$SIZE" >> $GITHUB_ENV

          # Extract version from tag name
          echo "üîç Extracting Android version from release tag..."
          VERSION=$(echo "$RELEASE_TAG" | grep -oP 'lineage-\K[0-9]+(\.[0-9]+)?')

          if [[ -z "$VERSION" ]]; then
            echo "‚ùå ERROR: Could not determine version from tag ($RELEASE_TAG). Exiting."
            exit 1
          fi

          echo "‚úÖ ANDROID VERSION FOUND: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 3: Generate OTA JSON
      - name: Generate OTA JSON
        run: |
          echo "=============================================="
          echo "üì¶ GENERATING OTA JSON FILE..."
          echo "=============================================="

          OTA_JSON="ota.json"

          echo "üîç Calculating MD5 checksum for verification..."
          MD5=$(curl -sL "${{ env.ASSET_URL }}" | md5sum | awk '{print $1}')
          echo "üîë MD5 CHECKSUM: $MD5"

          echo "‚è≥ Generating timestamp..."
          TIMESTAMP=$(date +%s)
          echo "üìÖ TIMESTAMP: $TIMESTAMP"

          echo "‚úçÔ∏è Writing OTA JSON file..."
          cat <<EOF > $OTA_JSON
          {
            "response": [
              {
                "datetime": $TIMESTAMP,
                "filename": "${{ env.FILENAME }}",
                "id": "$MD5",
                "romtype": "UNOFFICIAL",
                "size": ${{ env.SIZE }},
                "url": "${{ env.ASSET_URL }}",
                "version": "${{ env.VERSION }}"
              }
            ]
          }
          EOF

          echo "‚úÖ SUCCESS: OTA JSON File Created!"
          cat ota.json | jq

      # Step 4: Upload the OTA JSON file as an artifact
      - name: Upload OTA JSON
        uses: actions/upload-artifact@v4
        with:
          name: ota-json
          path: ota.json

      # Step 5: Commit and push OTA JSON to repository
      - name: Commit and push OTA JSON
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        run: |
          echo "=============================================="
          echo "üöÄ COMMITTING & PUSHING OTA JSON TO REPO..."
          echo "=============================================="

          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          echo "üìÇ Staging ota.json for commit..."
          git add ota.json
          
          echo "‚úçÔ∏è Creating commit..."
          git commit -m "Add OTA JSON for latest release ${{ env.TAG_NAME }}"

          echo "üì§ Pushing commit to repository..."
          git push origin HEAD:${{ github.ref_name }}

          echo "‚úÖ SUCCESS: OTA JSON pushed to repository!"
